{"version":3,"sources":["components/Tooltip/Tooltip.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tooltip","_ref","_ref$position","position","message","children","_useState","useState","_useState2","Object","slicedToArray","isVisible","setIsVisible","toggle","node","useRef","style","current","offsetWidth","left","concat","String","top","offsetHeight","react","className","onMouseOverCapture","onMouseOut","ref","react_transition_group","in","timeout","classNames","unmountOnExit","Header","objectDestructuringEmpty","src","alt","Footer","href","target","App","react_default","a","createElement","components_Header_Header","components_Tooltip_Tooltip","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAgFeA,EAhDoC,SAAAC,GAA2C,IAAAC,EAAAD,EAAzCE,gBAAyC,IAAAD,EAA9B,MAA8BA,EAAvBE,EAAuBH,EAAvBG,QAASC,EAAcJ,EAAdI,SAAcC,EAIxDC,oBAAkB,GAJsCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAInFK,EAJmFH,EAAA,GAIxEI,EAJwEJ,EAAA,GAKpFK,EAAS,kBAAMD,GAAcD,IAK7BG,EAAOC,iBAAY,MAKrBC,EAAuB,GAS3B,OARIF,EAAKG,SAAWH,EAAKG,QAAQC,cACZ,QAAbf,GAAmC,WAAbA,EACtBa,EAAMG,KAAN,GAAAC,OAAgBC,OAAOP,EAAKG,QAAQC,YAAc,GAAlD,MAEAF,EAAMM,IAAN,IAAAF,OAAgBC,OAAOP,EAAKG,QAAQM,aAAe,KAAnD,OAKJC,EAAA,qBAAKC,UAAU,WACXD,EAAA,qBACIC,UAAU,mBACVC,mBAAoBb,EACpBc,WAAYd,EACZe,IAAKd,GACJT,GAELmB,EAAA,cAACK,EAAA,cAAD,CACIC,GAAInB,EACJoB,QAAS,IACTC,WAAW,UACXC,eAAa,GACbT,EAAA,qBACIC,UAAS,sCAAAL,OAAwCjB,GACjDa,MAAOA,GACNZ,MCrDN8B,SATuC,SAAAjC,GAAA,OAAAQ,OAAA0B,EAAA,EAAA1B,CAAAR,GAClDuB,EAAA,wBAAQC,UAAU,UACdD,EAAA,qBAAKY,IAAI,kGACJC,IAAI,qBAAqBZ,UAAU,iBACxCD,EAAA,oBAAIC,UAAU,iBAAd,2BACAD,EAAA,oBAAIC,UAAU,oBAAd,0ECCOa,SANuC,SAAArC,GAAA,OAAAQ,OAAA0B,EAAA,EAAA1B,CAAAR,GAClDuB,EAAA,wBAAQC,UAAU,UAAlB,WACYD,EAAA,mBAAGe,KAAK,+CAA+CC,OAAO,UAA9D,UADZ,kBCuCWC,EArCiC,SAAAxC,GAAA,OAAAQ,OAAA0B,EAAA,EAAA1B,CAAAR,GAC5CyC,EAAAC,EAAAC,cAAA,OAAKnB,UAAU,OACXiB,EAAAC,EAAAC,cAACC,EAAD,MAGAH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACE,EAAD,CAAS1C,QAAQ,iDAAuCD,SAAS,MAAM4C,IAAI,aAA3E,kBAMJL,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACE,EAAD,CAAS1C,QAAQ,iDAAuCD,SAAS,SAAS4C,IAAI,aAA9E,kBAMJL,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACE,EAAD,CAAS1C,QAAQ,iDAAuCD,SAAS,QAAQ4C,IAAI,aAA7E,qBAMJL,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACE,EAAD,CAAS1C,QAAQ,iDAAuCD,SAAS,OAAO4C,IAAI,aAA5E,oBAKJL,EAAAC,EAAAC,cAACI,EAAD,QClCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eb319bba.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Tooltip.scss';\nimport {CSSTransition} from 'react-transition-group';\nimport {useState} from 'react';\nimport {useRef} from 'react';\n\nexport interface ITooltip {\n    /** Tooltip position. */\n    position?: 'top' | 'left' | 'right' | 'bottom';\n    /** Tooltip message content. */\n    message: String;\n    /** Array with details about columns to render. */\n    children: JSX.Element | Array<JSX.Element> | string;\n}\n\nexport interface ITooltipStyle {\n    /** Distance to the left edge. */\n    left?: string;\n    /** Distance to the top edge. */\n    top?: string;\n    /** Distance to the bottom edge. */\n    bottom?: string;\n    /** Distance to the right edge. */\n    right?: string;\n}\n\n/**\n * Tooltip component.\n *\n * @author Daniel Zawadzki <hello@danielzawadzki.com>\n * @version 1.0.0\n */\nconst Tooltip: React.FunctionComponent<ITooltip> = ({position = 'top', message, children}) => {\n    /**\n     * Hook toggling tooltip isVisible flag.\n     */\n    const [isVisible, setIsVisible] = useState<boolean>(false);\n    const toggle = () => setIsVisible(!isVisible);\n\n    /**\n     * Reference to the component to track width and height\n     */\n    const node = useRef<any>(null);\n\n    /**\n     * Positioning the component using the reference\n     */\n    let style: ITooltipStyle = {};\n    if (node.current && node.current.offsetWidth) {\n        if (position === 'top' || position === 'bottom') {\n            style.left = `${String(node.current.offsetWidth / 2)}px`;\n        } else {\n            style.top = `-${String(node.current.offsetHeight / 1.5)}px`;\n        }\n    }\n\n    return (\n        <div className=\"Tooltip\">\n            <div\n                className=\"Tooltip__toggler\"\n                onMouseOverCapture={toggle}\n                onMouseOut={toggle}\n                ref={node}>\n                {children}\n            </div>\n            <CSSTransition\n                in={isVisible}\n                timeout={200}\n                classNames=\"Tooltip\"\n                unmountOnExit>\n                <div\n                    className={`Tooltip__message Tooltip__message--${position}`}\n                    style={style}>\n                    {message}\n                </div>\n            </CSSTransition>\n        </div>\n    );\n};\n\nexport default Tooltip;\n","import * as React from 'react';\nimport './Header.scss';\n\nexport interface IHeaderProps {}\n\n/**\n * Header component.\n *\n * @author Daniel Zawadzki <hello@danielzawadzki.com>\n * @version 1.0.0\n */\nconst Header: React.FunctionComponent<IHeaderProps> = ({}) => (\n    <header className=\"Header\">\n        <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/155/label_1f3f7.png\"\n             alt=\"React-tooltip logo\" className=\"Header__logo\"/>\n        <h1 className=\"Header__title\">React-tooltip component</h1>\n        <h4 className=\"Header__subtitle\">A tooltip component created using React hooks and ref ðŸ”–.</h4>\n    </header>\n);\n\nexport default Header;","import * as React from 'react';\nimport './Footer.scss';\n\nexport interface IFooterProps {}\n\n/**\n * Footer component.\n *\n * @author Daniel Zawadzki <hello@danielzawadzki.com>\n * @version 1.0.0\n */\nconst Footer: React.FunctionComponent<IFooterProps> = ({}) => (\n    <footer className=\"Footer\">\n        Project <a href=\"https://github.com/danzawadzki/react-tooltip\" target=\"_blank\">GitHub</a> repository.\n    </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Tooltip from \"./components/Tooltip/Tooltip\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\n\nexport interface IAppProps {}\n\n/**\n * App component.\n *\n * @author Daniel Zawadzki <hello@danielzawadzki.com>\n * @version 1.0.0\n */\nconst App: React.FunctionComponent<IAppProps> = ({}) => (\n    <div className=\"App\">\n        <Header/>\n\n        {/* Tooltip 1 */}\n        <p>\n            <Tooltip message=\"Howdy-ho, I'm an example tooltip ðŸ¤—!\" position=\"top\" key=\"tooltip-1\">\n                Tooltip above\n            </Tooltip>\n        </p>\n\n        {/* Tooltip 2 */}\n        <p>\n            <Tooltip message=\"Howdy-ho, I'm an example tooltip ðŸ¤—!\" position=\"bottom\" key=\"tooltip-2\">\n                Tooltip under\n            </Tooltip>\n        </p>\n\n        {/* Tooltip 3 */}\n        <p>\n            <Tooltip message=\"Howdy-ho, I'm an example tooltip ðŸ¤—!\" position=\"right\" key=\"tooltip-3\">\n                Tooltip on right\n            </Tooltip>\n        </p>\n\n        {/* Tooltip 4 */}\n        <p>\n            <Tooltip message=\"Howdy-ho, I'm an example tooltip ðŸ¤—!\" position=\"left\" key=\"tooltip-4\">\n                Tooltip on left\n            </Tooltip>\n        </p>\n\n        <Footer/>\n    </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}